package pl.projektorion;

import com.badlogic.gdx.controllers.Controller;
import com.badlogic.gdx.controllers.Controllers;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.studiohartman.jamepad.ControllerAxis;
import com.studiohartman.jamepad.ControllerIndex;
import com.studiohartman.jamepad.ControllerManager;
import com.studiohartman.jamepad.ControllerState;
import io.reactivex.rxjava3.core.Observable;
import io.reactivex.rxjava3.disposables.Disposable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import java.awt.*;
import java.lang.reflect.Field;
import java.sql.Array;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.TimeUnit;

public class ControlApp {
    private static final Logger log = LoggerFactory.getLogger(ControlApp.class);

    private JPanel rootPanel;
    private JPanel joystickPanel;
    private JPanel telemetryPanel;
    private JTextField joystickXValue;
    private JTextField joystickYValue;
    private JLabel joystickXLabel;
    private JLabel joystickYLabel;
    private JLabel inputLabel;

    public static void main(String[] args) {
        JFrame frame = new JFrame("ControlApp");
        final ControlApp app = new ControlApp();
        frame.setContentPane(app.rootPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);

        ControllerManager controllers = new ControllerManager();
        controllers.initSDLGamepad();
        Runtime.getRuntime().addShutdownHook(new Thread(controllers::quitSDLGamepad));

        final Disposable subscribe = Observable.interval(500, TimeUnit.MILLISECONDS)
                .map(t -> {
                    controllers.update();
                    final int count = controllers.getNumControllers();
                    log.info("Detected {} controllers", count);

                    if (count > 0) {
                        final ControllerIndex controllerIndex = controllers.getControllerIndex(0);

//                        final ControllerState state = controllers.getState(0);
                        final float tLeft = controllerIndex.getAxisState(ControllerAxis.TRIGGERLEFT);
                        final float tRight = controllerIndex.getAxisState(ControllerAxis.TRIGGERRIGHT);
                        final float leftX = controllerIndex.getAxisState(ControllerAxis.LEFTX);
                        final float leftY = controllerIndex.getAxisState(ControllerAxis.LEFTY);
                        final float rightX = controllerIndex.getAxisState(ControllerAxis.RIGHTX);
                        final float rightY = controllerIndex.getAxisState(ControllerAxis.RIGHTY);
                        log.info("{}: {}-{}, {}-{}, {}-{}", controllerIndex.getName(), tLeft, tRight, leftX, leftY, rightX, rightY);
                        final ControllerState state = controllers.getState(0);
                        List<String> states = new ArrayList<>();
                        for (Field f : ControllerState.class.getFields()) {
                            final Object value = f.get(state);
                            states.add(f.getName() + "=" + value);
                        }
                        log.info("States = {}", String.join(", ", states));

                    }
                    app.joystickXValue.setText(String.format("%d s", t));
                    return t;
                })
                .subscribe();

        Runtime.getRuntime().addShutdownHook(new Thread(subscribe::dispose));
    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        joystickPanel = new JPanel();
        joystickPanel.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(joystickPanel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(400, -1), null, null, 0, false));
        joystickXLabel = new JLabel();
        joystickXLabel.setText("X:");
        joystickPanel.add(joystickXLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        joystickYLabel = new JLabel();
        joystickYLabel.setText("Y:");
        joystickPanel.add(joystickYLabel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        joystickXValue = new JTextField();
        joystickPanel.add(joystickXValue, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        joystickYValue = new JTextField();
        joystickPanel.add(joystickYValue, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        telemetryPanel = new JPanel();
        telemetryPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(telemetryPanel, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        inputLabel = new JLabel();
        inputLabel.setText("Input");
        rootPanel.add(inputLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

}
